"use strict";
// Copyright (c) 2021, PonyCui.
// for details. All rights reserved. Use of this source code is governed by a
// GPLv3 license that can be found in the LICENSE file.
Object.defineProperty(exports, "__esModule", { value: true });
exports.fs = exports.vs = void 0;
exports.vs = "\n\n// vec2(startTime, endTime, repeat)\nattribute vec3 a_life;\n// vec4(layout.x, layout.y, position.x, position.y)\nattribute vec4 a_position;\nattribute vec2 a_texCoord;\n// vec4(velocity.x, velocity.y, acceleration.x, acceleration.y)\nattribute vec4 a_speed;\n// vec3(alpha, alphaSpeed, textureId)\nattribute vec3 a_alpha;\n// vec2(scale, scaleSpeed)\nattribute vec2 a_scale;\n// vec2(rotation, rotationSpeed)\nattribute vec2 a_rotation;\nuniform vec2 u_resolution;\nuniform float u_time;\nvarying float v_alpha;\nvarying float v_textureId;\nvarying vec2 v_texCoord;\n\nvoid main() {\n  float currentTime = u_time - a_life.x;\n\n  if (a_life.z > 0.0) {\n    float nTime = u_time - a_life.x;\n    float segTime = a_life.y - a_life.x;\n    currentTime = nTime - floor(nTime / segTime) * segTime;\n  }\n  else if (currentTime < 0.0 || currentTime > a_life.y) {\n    gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n  }\n\n  vec2 currentScale = vec2(a_scale.x + a_scale.y * (currentTime / 1000.0), a_scale.x + a_scale.y * (currentTime / 1000.0));\n  vec2 currentSpeed = a_speed.xy + a_speed.zw * (currentTime / 1000.0);\n  float currentRotation = a_rotation.x + a_rotation.y * (currentTime / 1000.0);\n  float currentAlpha = a_alpha.x + a_alpha.y * (currentTime / 1000.0);\n\n  vec2 rotatedPosition = vec2(\n      cos(currentRotation) * a_position.x - sin(currentRotation) * a_position.y,\n      sin(currentRotation) * a_position.x + cos(currentRotation) * a_position.y);\n  vec2 scaledPosition = rotatedPosition * currentScale;\n  vec2 finalPositioned = scaledPosition + vec2(a_position.zw) + currentSpeed * (currentTime / 1000.0);\n\n  vec2 zeroToOne = (finalPositioned.xy) / u_resolution;\n  vec2 zeroToTwo = zeroToOne * 2.0;\n  vec2 clipSpace = zeroToTwo - 1.0;\n  gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\n  v_alpha = currentAlpha;\n  v_textureId = a_alpha.z;\n  v_texCoord = a_texCoord;\n}\n";
exports.fs = "\nprecision mediump float;\nvarying float v_alpha;\nvarying float v_textureId;\nvarying vec2 v_texCoord;\nuniform sampler2D u_textures[16];\n\nvoid main() {\n  int textureId = int(v_textureId);\n\n  if (textureId == 0) { gl_FragColor = texture2D(u_textures[0], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 1) { gl_FragColor = texture2D(u_textures[1], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 2) { gl_FragColor = texture2D(u_textures[2], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 3) { gl_FragColor = texture2D(u_textures[3], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 4) { gl_FragColor = texture2D(u_textures[4], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 5) { gl_FragColor = texture2D(u_textures[5], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 6) { gl_FragColor = texture2D(u_textures[6], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 7) { gl_FragColor = texture2D(u_textures[7], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 8) { gl_FragColor = texture2D(u_textures[8], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 9) { gl_FragColor = texture2D(u_textures[9], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 10) { gl_FragColor = texture2D(u_textures[10], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 11) { gl_FragColor = texture2D(u_textures[11], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 12) { gl_FragColor = texture2D(u_textures[12], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 13) { gl_FragColor = texture2D(u_textures[13], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 14) { gl_FragColor = texture2D(u_textures[14], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else if (textureId == 15) { gl_FragColor = texture2D(u_textures[15], v_texCoord) * vec4(1.0, 1.0, 1.0, v_alpha); }\n  else { gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0); }\n}\n";
